{"version":3,"sources":["Functions/getUserNFTData.js","Functions/getDashboardData.js","Functions/getListedNFTData.js","Logo.svg","Components/Header/Header.jsx","Components/Dashboard/NFTShowerCard.jsx","Components/Error404.jsx","Components/Dashboard/NFTShower.jsx","Components/Dashboard/UserNFTShowerCard.jsx","Components/Dashboard/UserDataShower.jsx","Components/Dashboard/Users.jsx","Components/Dashboard/Dashboard.jsx","Components/Loading.jsx","App.js","Redux/Reducers/userStates.js","Redux/Reducers/tempStates.js","Redux/store.js","index.js"],"names":["getUserNFTData","userAddress","provider","signer","a","tempAddress","substring","userData","address","nft","listed","getLogs","fromBlock","topics","logsData_NFT","logsData_Marketplace","tempArr","contract_NFT","ethers","Contract","i","length","curNFTId","Number","parseInt","ownerOf","indexOf","push","tokenURI","id","url","contract_Marketplace","curItemId","listedItems","itemData","nftId","isSold","price","_hex","listingId","getDashboardData","getListings","unfilteredData","filteredData","owner","uri","decoder","utils","AbiCoder","getListedNFTData","idInHex","toString","paddedId","padStart","decode","data","listedNFTData","Header","contextData","useContext","requiredInfo","contract","contractETH","mainUserData","useSelector","state","isMetamask","searchedNFTData","dispatch","useDispatch","history","useHistory","searchUser","undefined","searchInp","document","getElementsByClassName","value","trim","isAddress","type","payload","param","test","nftOwner","alert","console","log","window","location","reload","checkIsEnter","e","key","className","innerWidth","to","style","color","src","Logo","alt","onClick","placeholder","onKeyDown","href","NFTShowerCard","nftMainData","useState","nftData","setNFTData","useEffect","init","fetch","res","json","name","image","buyNFT","purchaseItem","wait","height","width","xmlns","viewBox","fill","d","formatEther","Error404","NFTShower","setCurNFTId","marginRight","attributes","map","trait_type","UserNFTShowerCard","isListed","curNum","curParameter","curUserAddress","listNFT","priceInWei","parseEther","error","approve","process","approveRes","listItem","listRes","hideInpTaker","display","opacity","onMouseEnter","onMouseLeave","onKeyUp","padding","client","ipfsHttpClient","UserDataShower","userProfileImage","setUserProfileImage","curUser","setCurUser","mintNFT","add","rootPath","imageDataLink","path","imageProperties","JSON","stringify","properties","headColor","eyesColor","lipsColor","bodyColor","armsColor","fingersColor","middleFingerColor","legsColor","feetColor","imagePropertiesPath","imagePropertiesLink","getSigner","getAddress","safeMint","transactionRes","slice","reverse","Users","curParamData","setCurParamData","searchedUserData","isLoading","wallet","Wallet","connect","Dashboard","listingData","dashboardData","userAddressOrNFTId","useParams","Loading","createContext","App","setContractETH","setProvider","ethereum","on","providers","Web3Provider","send","StickmanNFT_ABI","Marketplace_ABI","getDefaultProvider","Provider","exact","createReducer","setMainUserData","action","setSearchedUserData","setDashboardData","setSearchedNFTData","setIsMetamask","setIsLoading","setCurParameter","setCurUserAddress","store","configureStore","reducer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.0dca428e.chunk.js","sourcesContent":["import {\r\n    ethers\r\n} from \"ethers\";\r\nconst getUserNFTData = async (userAddress, provider, signer) => {\r\n    let tempAddress = \"0x000000000000000000000000\" + userAddress.substring(2, 63) // For Filtering Logs Data We Need Vales Of 64 Bytes And Here We Are Converting Users Address To 64 Bytes Or 0x+64 Characters Containing Address.\r\n\r\n    let userData = {\r\n        address: userAddress,\r\n        nft: [],\r\n        listed: []\r\n    }\r\n\r\n    let logsData_NFT = await provider.getLogs({\r\n        fromBlock: 0,\r\n        address: '0x9f6E11CB31F566e55Ec4dD582ccD2903a7C8c401',\r\n        topics: [\r\n            \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\r\n            null,\r\n            tempAddress\r\n        ]\r\n    })\r\n\r\n    let logsData_Marketplace = await provider.getLogs({\r\n        fromBlock: 0,\r\n        address: '0xD4510F9c951e9d724Fc0eDA47cf74a5cc147466C',\r\n        topics: [\r\n            \"0xbd5d1836d4114b1a1785c873a084824203ab9c294b3694e6a9fa69234a9113c6\",\r\n            tempAddress\r\n        ]\r\n    })\r\n\r\n    let tempArr = [];\r\n\r\n    let contract_NFT = new ethers.Contract(\"0x9f6E11CB31F566e55Ec4dD582ccD2903a7C8c401\", [{\r\n        \"inputs\": [{\r\n            \"internalType\": \"uint256\",\r\n            \"name\": \"tokenId\",\r\n            \"type\": \"uint256\"\r\n        }],\r\n        \"name\": \"ownerOf\",\r\n        \"outputs\": [{\r\n            \"internalType\": \"address\",\r\n            \"name\": \"\",\r\n            \"type\": \"address\"\r\n        }],\r\n        \"stateMutability\": \"view\",\r\n        \"type\": \"function\"\r\n    }, {\r\n        \"inputs\": [{\r\n            \"internalType\": \"uint256\",\r\n            \"name\": \"tokenId\",\r\n            \"type\": \"uint256\"\r\n        }],\r\n        \"name\": \"tokenURI\",\r\n        \"outputs\": [{\r\n            \"internalType\": \"string\",\r\n            \"name\": \"\",\r\n            \"type\": \"string\"\r\n        }],\r\n        \"stateMutability\": \"view\",\r\n        \"type\": \"function\"\r\n    }], signer);\r\n\r\n    for (let i = 0; i < logsData_NFT.length; i++) {\r\n        try {\r\n            let curNFTId = Number.parseInt(logsData_NFT[i].topics[3]);\r\n            if (await contract_NFT.ownerOf(curNFTId) === userAddress && tempArr.indexOf(curNFTId) === -1) {\r\n                tempArr.push(curNFTId);\r\n                userData.nft.push({\r\n                    id: curNFTId,\r\n                    url: await contract_NFT.tokenURI(curNFTId)\r\n                });\r\n            }\r\n        } catch (error) {}\r\n    }\r\n\r\n    let contract_Marketplace = new ethers.Contract(\"0xD4510F9c951e9d724Fc0eDA47cf74a5cc147466C\", [{\r\n        \"inputs\": [{\r\n            \"internalType\": \"uint256\",\r\n            \"name\": \"\",\r\n            \"type\": \"uint256\"\r\n        }],\r\n        \"name\": \"listedItems\",\r\n        \"outputs\": [{\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"id\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"owner\",\r\n                \"type\": \"address\"\r\n            },\r\n            {\r\n                \"internalType\": \"contract IERC721\",\r\n                \"name\": \"contractInstance\",\r\n                \"type\": \"address\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"price\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"bool\",\r\n                \"name\": \"isSold\",\r\n                \"type\": \"bool\"\r\n            }\r\n        ],\r\n        \"stateMutability\": \"view\",\r\n        \"type\": \"function\"\r\n    }], signer);\r\n\r\n    for (let i = 0; i < logsData_Marketplace.length; i++) {\r\n        try {\r\n            let curItemId = Number.parseInt(logsData_Marketplace[i].topics[3]);\r\n            let itemData = await contract_Marketplace.listedItems(curItemId - 1);\r\n            let nftId = Number.parseInt(itemData.id);\r\n            if (itemData.isSold === false) {\r\n                userData.listed.push({\r\n                    id: nftId,\r\n                    url: await contract_NFT.tokenURI(nftId),\r\n                    price: (itemData.price._hex),\r\n                    listingId: curItemId\r\n                });\r\n            }\r\n        } catch (error) {}\r\n    }\r\n\r\n    return userData;\r\n}\r\n\r\nexport default getUserNFTData;","const getDashboardData = async (contract_NFT, contract_Marketplace) => {\r\n    let unfilteredData = await contract_Marketplace.getListings();\r\n    let filteredData = [];\r\n    for (let i = 0; i < unfilteredData.length; i++) {\r\n        if (unfilteredData[i].isSold === false) {\r\n            let nftId = Number.parseInt(unfilteredData[i].id._hex);\r\n            filteredData.push({\r\n                id: nftId,\r\n                owner: unfilteredData[i].owner,\r\n                price: (unfilteredData[i].price._hex),\r\n                uri: await contract_NFT.tokenURI(nftId),\r\n                listingId: i + 1\r\n            })\r\n        }\r\n    }\r\n    return filteredData;\r\n}\r\n\r\nexport default getDashboardData;","import {\r\n    ethers\r\n} from \"ethers\";\r\nconst decoder = new ethers.utils.AbiCoder();\r\nconst getListedNFTData = async (id, provider) => {\r\n    let idInHex = (Number.parseInt(id)).toString(16);\r\n    let paddedId = \"0x\" + idInHex.padStart(64, \"0\");\r\n    let logsData_NFT = await provider.getLogs({\r\n        fromBlock: 0,\r\n        address: '0xd4510f9c951e9d724fc0eda47cf74a5cc147466c',\r\n        topics: [\r\n            \"0xbd5d1836d4114b1a1785c873a084824203ab9c294b3694e6a9fa69234a9113c6\",\r\n            null,\r\n            paddedId\r\n        ]\r\n    })\r\n    let filteredData = decoder.decode([\"address\", \"uint\"], logsData_NFT[0].data)\r\n    let listedNFTData = {\r\n        owner: \"0x\" + logsData_NFT[0].topics[1].substring(26, 66),\r\n        listingId: Number.parseInt(logsData_NFT[0].topics[3]),\r\n        price: (filteredData[1]._hex)\r\n    }\r\n    return listedNFTData\r\n}\r\n\r\nexport default getListedNFTData;","export default __webpack_public_path__ + \"static/media/Logo.89d978fa.svg\";","import React, { useContext } from 'react';\r\nimport { ethers } from \"ethers\";\r\nimport { requiredInfo } from \"../../App\";\r\nimport { FaSearch } from \"react-icons/fa\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport getListedNFTData from '../../Functions/getListedNFTData';\r\nimport Logo from \"../../Logo.svg\";\r\nconst Header = () => {\r\n\r\n    const contextData = useContext(requiredInfo);\r\n    const contract = contextData.contractETH;\r\n    let mainUserData = useSelector(state => state.mainUserData.data);\r\n    let isMetamask = useSelector(state => state.isMetamask.data);\r\n    let searchedNFTData = useSelector(state => state.searchedNFTData.data);\r\n    let dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const searchUser = async () => {\r\n        if (contract !== null && contract !== undefined) {\r\n            let searchInp = document.getElementsByClassName(\"searchBarInp\")[0].value.trim();\r\n            if (searchInp !== \"\") {\r\n                try {\r\n                    if (ethers.utils.isAddress(searchInp) === true) {\r\n                        dispatch({ type: \"setCurParameter\", payload: { param: searchInp, isAddress: true } })\r\n                        history.push(\"/\" + searchInp);\r\n                    }\r\n                    else if (/[a-zA-Z]/.test(searchInp) === false) {\r\n                        if (searchedNFTData === null || searchInp !== searchedNFTData.id) {\r\n                            dispatch({ type: \"setIsLoading\", payload: true })\r\n                            let nftOwner = await contract.contract_NFT.ownerOf(searchInp);\r\n                            if (nftOwner !== \"0x0000000000000000000000000000000000000000\") {\r\n                                if (searchedNFTData !== null) {\r\n                                    dispatch({ type: \"setSearchedNFTData\", payload: null });\r\n                                }\r\n                                let data;\r\n                                if (nftOwner === \"0xD4510F9c951e9d724Fc0eDA47cf74a5cc147466C\") {\r\n                                    let listedNFTData = await getListedNFTData(searchInp, contextData.provider);\r\n                                    data = {\r\n                                        id: searchInp,\r\n                                        uri: await contract.contract_NFT.tokenURI(searchInp),\r\n                                        owner: listedNFTData.owner,\r\n                                        listingId: listedNFTData.listingId,\r\n                                        price: listedNFTData.price\r\n                                    };\r\n                                } else {\r\n                                    data = {\r\n                                        id: searchInp,\r\n                                        uri: await contract.contract_NFT.tokenURI(searchInp),\r\n                                        owner: nftOwner\r\n                                    };\r\n                                }\r\n                                dispatch({ type: \"setCurParameter\", payload: { param: searchInp, isAddress: false } })\r\n                                dispatch({ type: \"setSearchedNFTData\", payload: data });\r\n                                dispatch({ type: \"setIsLoading\", payload: false })\r\n                                history.push(\"/\" + searchInp);\r\n                            } else {\r\n                                alert(\"NFT Not Exits\");\r\n                            }\r\n                        } else {\r\n                            history.push(\"/\" + searchInp);\r\n                        }\r\n                    } else {\r\n                        alert(\"Invalid Input\");\r\n                    }\r\n                } catch (error) {\r\n                    console.log(error)\r\n                    alert(\"Invalid Input\");\r\n                    // window.location.reload();\r\n                }\r\n            } else {\r\n                alert(\"Search Field Is Empty\");\r\n            }\r\n        } else {\r\n            alert(\"Something Went Wrong\");\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    const checkIsEnter = async (e) => {\r\n        if (e.key === \"Enter\") {\r\n            await searchUser();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"headerMainDiv\">\r\n                <div className=\"subHeaderDiv\">\r\n                    {\r\n                        window.innerWidth > 700 ?\r\n                            <div className=\"headingText\">\r\n                                <Link to=\"/\">\r\n                                    <span style={{ color: \"white\" }}> VARt <span style={{ color: \"#61dafb\" }}>Stickman</span></span>\r\n                                </Link>\r\n                            </div>\r\n                            : <Link to=\"/\">\r\n                                <img src={Logo} className=\"stickmanLogoImg\" alt=\"\" />\r\n                            </Link>\r\n                    }\r\n                    <div className=\"searchBar\">\r\n                        <FaSearch onClick={() => searchUser()} />\r\n                        <input type=\"text\" placeholder={window.innerWidth > 420 ? \"Search By Id / Address\" : \"Id / Address\"} className=\"searchBarInp\" onKeyDown={(e) => checkIsEnter(e)} />\r\n                    </div>\r\n                    <div className=\"userAccount\">\r\n                        {\r\n                            isMetamask === null ?\r\n                                <></> :\r\n                                isMetamask === true ?\r\n                                    mainUserData === null ?\r\n                                        <div onClick={() => {\r\n                                            window.location.reload();\r\n                                        }} className=\"subUserAccount\">Wait..</div> :\r\n                                        <Link to={\"/\" + mainUserData.address}>\r\n                                            <div className=\"subUserAccount\">{mainUserData.address.substring(0, 5) + \"...\" + mainUserData.address.substring(39, 41)}</div>\r\n                                        </Link> :\r\n                                    <div onClick={() => {\r\n                                        window.location.href = \"https://metamask.io/\"\r\n                                    }} className=\"subUserAccount\">Add Wallet</div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Header","import React, { useEffect, useState, useContext } from 'react'\r\nimport { ethers } from \"ethers\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { requiredInfo } from \"../../App\";\r\n\r\nconst NFTShowerCard = ({ nftMainData }) => {\r\n  let contextData = useContext(requiredInfo);\r\n  let contract = contextData.contractETH;\r\n  const [nftData, setNFTData] = useState(null);\r\n  const dispatch = useDispatch();\r\n  let history = useHistory();\r\n  let isMetamask = useSelector(state => state.isMetamask.data);\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      try {\r\n        if (nftData === null || nftData === undefined) {\r\n          let res = await fetch(nftMainData.uri);\r\n          let data = await res.json();\r\n          setNFTData({ name: data.name, image: data.image });\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n        alert(\"Something Went Wrong\");\r\n        window.location.reload();\r\n      }\r\n    }\r\n    init();\r\n  })\r\n\r\n  const buyNFT = async () => {\r\n    if (contract.contract_Marketplace !== null && contract.contract_Marketplace !== undefined) {\r\n      try {\r\n        dispatch({ type: \"setIsLoading\", payload: true })\r\n        let res = await contract.contract_Marketplace.purchaseItem(nftMainData.listingId, { value: nftMainData.price });\r\n        await res.wait();\r\n        window.location.reload();\r\n      } catch (error) {\r\n        console.log(error);\r\n        alert(\"Something Went Wrong\");\r\n        window.location.reload();\r\n      }\r\n    } else {\r\n      alert(\"Something Went Wrong\");\r\n      window.location.reload();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {\r\n        nftData !== null && nftData !== undefined ?\r\n          <div className=\"mainCardDiv\">\r\n            <div className=\"imageShower\">\r\n              <img src={nftData.image} alt=\"\" />\r\n            </div>\r\n            <div className=\"nftNameAndPriceShower\">\r\n              <span>\r\n                <span onClick={() => {\r\n                  history.push(\"/\" + nftMainData.id);\r\n                }} className=\"nftIdShower\">#{nftMainData.id}</span> {nftData.name}\r\n              </span>\r\n              <span className=\"priceShower\">\r\n                <svg style={{ height: \"2rem\", width: \"fit-content\" }} xmlns=\"http://www.w3.org/2000/svg\" width=\"33\" height=\"53\" viewBox=\"0 0 33 53\" fill=\"none\">\r\n                  <path d=\"M16.3576 0.666687L16.0095 1.85009V36.1896L16.3576 36.5371L32.2976 27.115L16.3576 0.666687Z\" fill=\"#343434\" />\r\n                  <path d=\"M16.3578 0.666687L0.417816 27.115L16.3578 36.5372V19.8699V0.666687Z\" fill=\"#8C8C8C\" />\r\n                  <path d=\"M16.3575 39.5552L16.1613 39.7944V52.0268L16.3575 52.6L32.307 30.1378L16.3575 39.5552Z\" fill=\"#3C3C3B\" />\r\n                  <path d=\"M16.3578 52.5998V39.5551L0.417816 30.1377L16.3578 52.5998Z\" fill=\"#8C8C8C\" />\r\n                  <path d=\"M16.3575 36.537L32.2973 27.1151L16.3575 19.8699V36.537Z\" fill=\"#141414\" />\r\n                  <path d=\"M0.417816 27.1151L16.3576 36.537V19.8699L0.417816 27.1151Z\" fill=\"#393939\" />\r\n                </svg> {ethers.utils.formatEther(nftMainData.price)}\r\n              </span>\r\n              <span onClick={() => { history.push(\"/\" + nftMainData.owner) }} className=\"ownerAddressShower\">{nftMainData.owner}</span>\r\n            </div>\r\n            {\r\n              isMetamask === true ? <><div className=\"buyNFTShower\" onClick={() => buyNFT()}>Buy</div></> : <></>\r\n            }\r\n          </div>\r\n          : <></>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NFTShowerCard","import React from \"react\";\r\n\r\nconst Error404 = () => {\r\n    return (\r\n        <>\r\n            <div className=\"div1\">\r\n                <div className=\"subMainDivError404\">\r\n                    <div className=\"div2\">\r\n                        <div className=\"op40 err1\">\r\n                            <h1>4</h1>\r\n                        </div>\r\n                        <div className=\"op41 err1\">\r\n                            <h1>0</h1>\r\n                        </div>\r\n                        <div className=\"op42 err1\">\r\n                            <h1>4</h1>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"message1\">\r\n                        <h1>Something Went Wrong</h1>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Error404;","import React, { useState, useEffect, useContext } from 'react'\r\nimport { ethers } from \"ethers\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { requiredInfo } from \"../../App\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst NFTShower = () => {\r\n  const [nftData, setNFTData] = useState(null);\r\n  const [curNFTId, setCurNFTId] = useState(null);\r\n  let contextData = useContext(requiredInfo);\r\n  let contract = contextData.contractETH;\r\n  let dispatch = useDispatch();\r\n  let history = useHistory();\r\n  let searchedNFTData = useSelector(state => state.searchedNFTData.data);\r\n  let isMetamask = useSelector(state => state.isMetamask.data);\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      if ((searchedNFTData !== null) && (curNFTId === null || curNFTId !== searchedNFTData.id)) {\r\n        setCurNFTId(searchedNFTData.id)\r\n      }\r\n    }\r\n    init();\r\n  })\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      if ((searchedNFTData !== null)) {\r\n        dispatch({ type: \"setIsLoading\", payload: true });\r\n        let res = await fetch(searchedNFTData.uri);\r\n        let data = await res.json();\r\n        setNFTData(data);\r\n        dispatch({ type: \"setIsLoading\", payload: false });\r\n      }\r\n    }\r\n    init();\r\n  }, [curNFTId])\r\n\r\n  const buyNFT = async () => {\r\n    if (contract.contract_Marketplace !== null && contract.contract_Marketplace !== undefined) {\r\n      try {\r\n        dispatch({ type: \"setIsLoading\", payload: true })\r\n        let res = await contract.contract_Marketplace.purchaseItem(searchedNFTData.listingId, { value: searchedNFTData.price });\r\n        await res.wait();\r\n        window.location.reload();\r\n      } catch (error) {\r\n        console.log(error);\r\n        alert(\"Something Went Wrong\");\r\n        window.location.reload();\r\n      }\r\n    } else {\r\n      alert(\"Something Went Wrong\");\r\n      window.location.reload();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {\r\n        searchedNFTData !== null && nftData !== null ?\r\n          <>\r\n            <div className=\"mainNFTShowerDiv\">\r\n              <div className=\"subNFTShowerDiv\">\r\n                <div className=\"nftImageShower\"><img src={nftData.image} alt=\"\" /></div>\r\n                <div className=\"nftInfoShower\">\r\n                  <span className=\"nftIdShower_NFT\">#{searchedNFTData.id}</span>\r\n                  <span className=\"nftNameShower_NFT\">{nftData.name}</span>\r\n                  <span className=\"ownerAddressShower_NFT\">Owned By <span onClick={() => {\r\n                    history.push(\"/\" + searchedNFTData.owner)\r\n                  }}>{searchedNFTData.owner}</span></span>\r\n                  <div className=\"showBuyOption_NFT\">\r\n                    {\r\n                      searchedNFTData.listingId !== undefined ?\r\n                        <>\r\n                          <span className=\"priceText_NFT\">Price</span>\r\n                          <span className=\"priceShower_NFT\">\r\n                            <svg style={{ height: \"3rem\", width: \"fit-content\", marginRight: \"1rem\" }} xmlns=\"http://www.w3.org/2000/svg\" width=\"33\" height=\"53\" viewBox=\"0 0 33 53\" fill=\"none\">\r\n                              <path d=\"M16.3576 0.666687L16.0095 1.85009V36.1896L16.3576 36.5371L32.2976 27.115L16.3576 0.666687Z\" fill=\"#343434\" />\r\n                              <path d=\"M16.3578 0.666687L0.417816 27.115L16.3578 36.5372V19.8699V0.666687Z\" fill=\"#8C8C8C\" />\r\n                              <path d=\"M16.3575 39.5552L16.1613 39.7944V52.0268L16.3575 52.6L32.307 30.1378L16.3575 39.5552Z\" fill=\"#3C3C3B\" />\r\n                              <path d=\"M16.3578 52.5998V39.5551L0.417816 30.1377L16.3578 52.5998Z\" fill=\"#8C8C8C\" />\r\n                              <path d=\"M16.3575 36.537L32.2973 27.1151L16.3575 19.8699V36.537Z\" fill=\"#141414\" />\r\n                              <path d=\"M0.417816 27.1151L16.3576 36.537V19.8699L0.417816 27.1151Z\" fill=\"#393939\" />\r\n                            </svg> {ethers.utils.formatEther(searchedNFTData.price)}\r\n                          </span>\r\n                          {\r\n                            isMetamask === true ? <> <div onClick={() => buyNFT()} className=\"buyNFTButton_NFT\">Buy</div></> : <></>\r\n                          }\r\n                        </> :\r\n                        <>\r\n                          <div className=\"notForSaleMessShower\">Not Listed</div>\r\n                        </>\r\n                    }\r\n                  </div>\r\n                </div>\r\n                <div className=\"nftFeaturesShower\">\r\n                  {\r\n                    nftData.attributes.map((data, i) =>\r\n                    (\r\n                      <div key={i} className=\"nftFeature\">\r\n                        <span>{data.trait_type}</span>\r\n                        <span className=\"nftFeatureData\">{data.value}</span>\r\n                      </div>\r\n                    ))\r\n                  }\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </> : <></>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NFTShower","import React, { useState, useEffect, useContext } from 'react'\r\nimport { ethers } from \"ethers\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { requiredInfo } from \"../../App\";\r\n\r\nconst UserNFTShowerCard = ({ userData, isListed, curNum }) => {\r\n    let contextData = useContext(requiredInfo);\r\n    let contract = contextData.contractETH;\r\n    const [nftData, setNFTData] = useState(null);\r\n    const [curNFTId, setCurNFTId] = useState(null);\r\n    const dispatch = useDispatch();\r\n    let curParameter = useSelector(state => state.curParameter.data);\r\n    let curUserAddress = useSelector(state => state.curUserAddress.data);\r\n    let isMetamask = useSelector(state => state.isMetamask.data);\r\n    let history = useHistory();\r\n\r\n    useEffect(() => {\r\n        const init = async () => {\r\n            if (curNFTId === null || curNFTId !== userData.id) {\r\n                setCurNFTId(userData.id)\r\n            }\r\n        }\r\n        init();\r\n    })\r\n\r\n    useEffect(() => {\r\n        const init = async () => {\r\n            try {\r\n                let res = await fetch(userData.url);\r\n                let data = await res.json();\r\n                setNFTData({ name: data.name, image: data.image });\r\n            } catch (error) {\r\n                console.log(error);\r\n                alert(\"Something Went Wrong\");\r\n                window.location.reload();\r\n            }\r\n        }\r\n        init();\r\n\r\n        return () => {\r\n            setNFTData(null);\r\n        };\r\n    }, [curNFTId])\r\n\r\n    const listNFT = async () => {\r\n        if (contract !== null) {\r\n            let price = document.getElementsByClassName(\"nftPriceINP\")[curNum].value.trim();\r\n            if (price !== \"\") {\r\n                let priceInWei;\r\n                try {\r\n                    priceInWei = ethers.utils.parseEther(price);\r\n                } catch (error) {\r\n                    alert(\"Base Value Is Too Small\", false);\r\n                }\r\n                try {\r\n                    dispatch({ type: \"setIsLoading\", payload: true });\r\n                    let approveRes = await contract.contract_NFT.approve(process.env.REACT_APP_CONTRACT_MARKETPLACE, userData.id);\r\n                    await approveRes.wait();\r\n                    let listRes = await contract.contract_Marketplace.listItem(userData.id, process.env.REACT_APP_CONTRACT_NFT, priceInWei);\r\n                    await listRes.wait();\r\n                    alert('Your NFT Is Listed');\r\n                    window.location.reload();\r\n                } catch (error) {\r\n                    console.log(error)\r\n                    alert('Something Went Wrong');\r\n                    window.location.reload();\r\n                }\r\n            } else {\r\n                alert(\"Please Enter Price\");\r\n            }\r\n        } else {\r\n            alert('Something Went Wrong');\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    const buyNFT = async () => {\r\n        if (contract.contract_Marketplace !== null && contract.contract_Marketplace !== undefined) {\r\n            try {\r\n                dispatch({ type: \"setIsLoading\", payload: true })\r\n                let res = await contract.contract_Marketplace.purchaseItem(userData.listingId, { value: userData.price });\r\n                await res.wait();\r\n                window.location.reload();\r\n            } catch (error) {\r\n                console.log(error);\r\n                alert(\"Something Went Wrong\");\r\n                window.location.reload();\r\n            }\r\n        } else {\r\n            alert(\"Something Went Wrong\");\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    const hideInpTaker = (e) => {\r\n        document.getElementsByClassName(\"nftPriceINP\")[curNum].style.display = \"none\";\r\n        document.getElementsByClassName(\"nftPriceINP\")[curNum].style.opacity = \"0\";\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                nftData !== null && nftData !== undefined ?\r\n                    <div className=\"mainCardDiv\">\r\n                        <div className=\"imageShower\">\r\n                            <img src={nftData.image} alt=\"\" />\r\n                        </div>\r\n                        <div className=\"nftNameAndPriceShower\">\r\n                            <span>\r\n                                <span onClick={() => {\r\n                                    history.push(\"/\" + userData.id)\r\n                                }} className=\"nftIdShower\">#{userData.id}</span> {nftData.name}\r\n                            </span>\r\n                            {\r\n                                isListed === true ?\r\n                                    <> <span className=\"priceShower\">\r\n                                        <svg style={{ height: \"2rem\", width: \"fit-content\" }} xmlns=\"http://www.w3.org/2000/svg\" width=\"33\" height=\"53\" viewBox=\"0 0 33 53\" fill=\"none\">\r\n                                            <path d=\"M16.3576 0.666687L16.0095 1.85009V36.1896L16.3576 36.5371L32.2976 27.115L16.3576 0.666687Z\" fill=\"#343434\" />\r\n                                            <path d=\"M16.3578 0.666687L0.417816 27.115L16.3578 36.5372V19.8699V0.666687Z\" fill=\"#8C8C8C\" />\r\n                                            <path d=\"M16.3575 39.5552L16.1613 39.7944V52.0268L16.3575 52.6L32.307 30.1378L16.3575 39.5552Z\" fill=\"#3C3C3B\" />\r\n                                            <path d=\"M16.3578 52.5998V39.5551L0.417816 30.1377L16.3578 52.5998Z\" fill=\"#8C8C8C\" />\r\n                                            <path d=\"M16.3575 36.537L32.2973 27.1151L16.3575 19.8699V36.537Z\" fill=\"#141414\" />\r\n                                            <path d=\"M0.417816 27.1151L16.3576 36.537V19.8699L0.417816 27.1151Z\" fill=\"#393939\" />\r\n                                        </svg> {ethers.utils.formatEther(userData.price)}\r\n                                    </span></>\r\n                                    : <></>\r\n                            }\r\n                        </div>\r\n                        {\r\n                            isListed !== true && curParameter.param === curUserAddress ?\r\n                                <>\r\n                                    <div onMouseEnter={() => {\r\n                                        document.getElementsByClassName(\"nftPriceINP\")[curNum].style.display = \"block\"\r\n                                        document.getElementsByClassName(\"nftPriceINP\")[curNum].style.opacity = \"1\"\r\n                                    }} onMouseLeave={() => {\r\n                                        document.getElementsByClassName(\"nftPriceINP\")[curNum].value === \"\" ?\r\n                                            hideInpTaker()\r\n                                            : <></>\r\n                                    }} className=\"buyNFTShower\" id=\"listNFTButton\">\r\n                                        <span className=\"listNFTShower\" onClick={() => listNFT()}>List</span>\r\n                                        <input onKeyUp={(e) => {\r\n                                            document.getElementsByClassName(\"nftPriceINP\")[curNum].value === \"\" && e.key === \"Backspace\" ?\r\n                                                hideInpTaker()\r\n                                                : <></>\r\n                                        }} type=\"number\" name=\"nftPriceTaker\" id=\"nftPriceTaker\" className=\"nftPriceINP\" placeholder=\"Price In ETH\" />\r\n                                    </div>\r\n                                </>\r\n                                : curParameter.param !== curUserAddress && isListed === true && isMetamask === true ?\r\n                                    <><div className=\"buyNFTShower\" onClick={() => buyNFT()}>Buy</div></>\r\n                                    : <><div style={{ padding: \"1rem\" }}></div></>\r\n                        }\r\n                    </div>\r\n                    : <></>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UserNFTShowerCard","import React, { useState, useEffect, useContext } from 'react'\r\nimport { requiredInfo } from \"../../App\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport UserNFTShowerCard from './UserNFTShowerCard';\r\nimport { FaQuestion } from \"react-icons/fa\";\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client' // This Line Of Code Is Taken From \"https://github.com/dappuniversity/nft_marketplace/blob/main/src/frontend/components/Create.js\", Basically Web3.Storage Was Not Working With ReactJs Because Of This We Are Using IPFS-Client.\r\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\nconst UserDataShower = ({ userData }) => {\r\n\r\n  const [userProfileImage, setUserProfileImage] = useState(null);\r\n  let contextData = useContext(requiredInfo);\r\n  let contract = contextData.contractETH.contract_NFT;\r\n  let dispatch = useDispatch();\r\n  let curParameter = useSelector(state => state.curParameter.data);\r\n  let curUserAddress = useSelector(state => state.curUserAddress.data);\r\n  const [curUser, setCurUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      if (curUser === null || curUser !== userData.address) {\r\n        setCurUser(userData.address)\r\n      }\r\n    }\r\n    init();\r\n  })\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      try {\r\n        if (((userData.nft.length > 0 || userData.listed.length > 0))) {\r\n          let url = userData.nft.length > 0 ?\r\n            userData.nft[userData.nft.length - 1].url\r\n            : userData.listed[userData.listed.length - 1].url\r\n          let res = await fetch(url);\r\n          let data = await res.json();\r\n          setUserProfileImage(data.image);\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n        alert(\"Something Went Wrong\");\r\n        window.location.reload();\r\n      }\r\n    }\r\n    init();\r\n    return () => {\r\n      setUserProfileImage(null);\r\n    };\r\n  }, [curUser])\r\n\r\n  const mintNFT = async () => {\r\n    if (contract !== null && contract !== undefined) {\r\n      try {\r\n        dispatch({ type: \"setIsLoading\", payload: true })\r\n        let res = await fetch(\"/generateArt\");\r\n        let data = await res.json();\r\n        const rootPath = await client.add(data.data.image.data);\r\n        let imageDataLink = \"https://ipfs.io/ipfs/\" + rootPath.path;\r\n        const imageProperties = JSON.stringify({\r\n          \"name\": \"Thug Stickman #\" + 1,\r\n          \"description\": \"This Is Thug Stickman, Please Buy It Because For That You Dont Need Real ETH\",\r\n          \"image\": imageDataLink,\r\n          \"attributes\": [{\r\n            \"trait_type\": \"Head Color\",\r\n            \"value\": data.data.properties.headColor\r\n          },\r\n          {\r\n            \"trait_type\": \"Eyes Color\",\r\n            \"value\": data.data.properties.eyesColor\r\n          },\r\n          {\r\n            \"trait_type\": \"Lips Color\",\r\n            \"value\": data.data.properties.lipsColor\r\n          },\r\n          {\r\n            \"trait_type\": \"Body Color\",\r\n            \"value\": data.data.properties.bodyColor\r\n          },\r\n          {\r\n            \"trait_type\": \"Arms Color\",\r\n            \"value\": data.data.properties.armsColor\r\n          },\r\n          {\r\n            \"trait_type\": \"Fingers Color\",\r\n            \"value\": data.data.properties.fingersColor\r\n          },\r\n          {\r\n            \"trait_type\": \"Middle Finger Color\",\r\n            \"value\": data.data.properties.middleFingerColor\r\n          },\r\n          {\r\n            \"trait_type\": \"Legs Color\",\r\n            \"value\": data.data.properties.legsColor\r\n          },\r\n          {\r\n            \"trait_type\": \"Feet Color\",\r\n            \"value\": data.data.properties.feetColor\r\n          }\r\n          ]\r\n        })\r\n        const imagePropertiesPath = await client.add(imageProperties);\r\n        let imagePropertiesLink = \"https://ipfs.io/ipfs/\" + imagePropertiesPath.path;\r\n        let provider = contextData.provider;\r\n        let transactionRes = await contract.safeMint(await provider.getSigner().getAddress(), imagePropertiesLink, { value: 0 })\r\n        await transactionRes.wait();\r\n        alert(\"NFT Minted Successfully\");\r\n        window.location.reload();\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    } else {\r\n      alert(\"Something Went Wrong\");\r\n      window.location.reload();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"mainUserDataShowerDiv\">\r\n        <div className=\"tempBackground\"></div>\r\n        <div className=\"subUserDataShowerDiv\">\r\n          <div className=\"profileShower\">\r\n            {\r\n              userData.nft.length > 0 || userData.listed.length > 0 ?\r\n                userProfileImage !== null && userProfileImage !== undefined ?\r\n                  <img src={userProfileImage} alt=\"stickmanImage\" /> : <div className=\"tempProfileDiv\"></div>\r\n                : <><div className=\"tempProfileDiv\"><FaQuestion /></div></>\r\n            }\r\n            {\r\n              curParameter.param === curUserAddress ? <span onClick={() => mintNFT()} className=\"mintNFTButton\">Mint</span> : <></>\r\n            }\r\n            <span className=\"userAddressShower\">{userData.address}</span>\r\n          </div>\r\n          <div className=\"ownedNFTShower\">\r\n            {\r\n              userData.nft.slice(0).reverse().map((data, i) => (\r\n                <UserNFTShowerCard key={i} userData={data} isListed={false} curNum={i} />\r\n              ))\r\n            }\r\n            {\r\n              userData.listed.slice(0).reverse().map((data, i) => (\r\n                <UserNFTShowerCard key={i} userData={data} isListed={true} curNum={i} />\r\n              ))\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserDataShower","import React, { useState, useEffect, useContext } from 'react'\r\nimport { ethers } from 'ethers';\r\nimport { requiredInfo } from \"../../App\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport getUserNFTData from '../../Functions/getUserNFTData';\r\nimport getListedNFTData from '../../Functions/getListedNFTData';\r\nimport Error404 from '../Error404';\r\nimport NFTShower from './NFTShower';\r\nimport UserDataShower from \"./UserDataShower\";\r\n\r\nconst Users = () => {\r\n\r\n    let contextData = useContext(requiredInfo);\r\n    let contract = contextData.contractETH;\r\n    let dispatch = useDispatch();\r\n    const [curParamData, setCurParamData] = useState(null);\r\n    let curParameter = useSelector(state => state.curParameter.data);\r\n    let mainUserData = useSelector(state => state.mainUserData.data);\r\n    let searchedUserData = useSelector(state => state.searchedUserData.data);\r\n    let searchedNFTData = useSelector(state => state.searchedNFTData.data);\r\n    let curUserAddress = useSelector(state => state.curUserAddress.data);\r\n    let isLoading = useSelector(state => state.isLoading.data);\r\n    let isMetamask = useSelector(state => state.isMetamask.data);\r\n    useEffect(() => {\r\n        const init = async () => {\r\n            if (contract !== null && contract !== undefined && curParameter !== null) {\r\n                if (curParameter.isAddress === true) {\r\n                    if ((searchedUserData === null || curParameter.param !== curParamData) && (curParameter.param !== curUserAddress)) {\r\n                        if ((searchedUserData !== null) && (searchedUserData.address === curParameter.param)) {\r\n                            return;\r\n                        } else {\r\n                            if (searchedUserData !== null) {\r\n                                dispatch({ type: \"setSearchedUserData\", payload: null });\r\n                            }\r\n                            let provider = contextData.provider;\r\n                            dispatch({ type: \"setIsLoading\", payload: true })\r\n                            if (isMetamask === true) {\r\n                                dispatch({ type: \"setSearchedUserData\", payload: await getUserNFTData(curParameter.param, provider, provider.getSigner()) });\r\n                            } else {\r\n                                let wallet = new ethers.Wallet(process.env.REACT_APP_TEMP_WALLET);\r\n                                let signer = wallet.connect(provider)\r\n                                dispatch({ type: \"setSearchedUserData\", payload: await getUserNFTData(curParameter.param, provider, signer) });\r\n                            }\r\n                            setCurParamData(curParameter.param);\r\n                            dispatch({ type: \"setIsLoading\", payload: false })\r\n                        }\r\n                    }\r\n                } else if (curParameter.isAddress === false) {\r\n                    if ((searchedNFTData === null && isLoading === false)) {\r\n                        try {\r\n                            dispatch({ type: \"setIsLoading\", payload: true })\r\n                            let nftOwner = await contract.contract_NFT.ownerOf(curParameter.param);\r\n                            let data;\r\n                            if (nftOwner === process.env.REACT_APP_CONTRACT_MARKETPLACE) {\r\n                                let listedNFTData = await getListedNFTData(curParameter.param, contextData.provider);\r\n                                data = {\r\n                                    id: curParameter.param,\r\n                                    uri: await contract.contract_NFT.tokenURI(curParameter.param),\r\n                                    owner: listedNFTData.owner,\r\n                                    listingId: listedNFTData.listingId,\r\n                                    price: listedNFTData.price\r\n                                };\r\n                            } else {\r\n                                data = {\r\n                                    id: curParameter.param,\r\n                                    uri: await contract.contract_NFT.tokenURI(curParameter.param),\r\n                                    owner: nftOwner\r\n                                };\r\n                            }\r\n                            dispatch({ type: \"setSearchedNFTData\", payload: data });\r\n                            setCurParamData(curParameter.param);\r\n                            dispatch({ type: \"setIsLoading\", payload: false })\r\n                        } catch (error) {\r\n                            dispatch({ type: \"setIsLoading\", payload: false })\r\n                            dispatch({ type: \"setCurParameter\", payload: { param: curParameter.param, isAddress: null } })\r\n                            console.log(error)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        init();\r\n    })\r\n\r\n    return (\r\n        <>\r\n            {\r\n                curParameter !== null && curParameter !== undefined ?\r\n                    curParameter.isAddress === null ?\r\n                        <Error404 />\r\n                        : curParameter.isAddress === true ?\r\n                            curUserAddress === curParameter.param ? mainUserData !== null && mainUserData !== undefined ? <UserDataShower userData={mainUserData} /> : <></>\r\n                                : searchedUserData !== null && searchedUserData !== undefined ? <UserDataShower userData={searchedUserData} /> : <></>\r\n                            : <NFTShower />\r\n                    : <></>\r\n            }\r\n        </>\r\n    )\r\n}\r\n// 0x3D21439ec0282Ecb775a80c7A772f154aE08609D \r\n// 0x33B1645219C782aF822ae78fF8865c30BfA508D9\r\nexport default Users","import React, { useEffect } from 'react';\r\nimport { ethers } from \"ethers\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport NFTShowerCard from './NFTShowerCard';\r\nimport Users from \"./Users\";\r\nconst Dashboard = () => {\r\n\r\n    let dispatch = useDispatch();\r\n    let listingData = useSelector(state => state.dashboardData.data);\r\n    let curParameter = useSelector(state => state.curParameter.data);\r\n    let { userAddressOrNFTId } = useParams();\r\n    useEffect(() => {\r\n        const init = async () => {\r\n            if ((curParameter === null || curParameter === undefined || curParameter.param !== userAddressOrNFTId) && (userAddressOrNFTId !== undefined)) {\r\n                if (ethers.utils.isAddress(userAddressOrNFTId) === true) {\r\n                    dispatch({ type: \"setCurParameter\", payload: { param: userAddressOrNFTId, isAddress: true } })\r\n                }\r\n                else if (/[a-zA-Z]/.test(userAddressOrNFTId) === false) {\r\n                    dispatch({ type: \"setCurParameter\", payload: { param: userAddressOrNFTId, isAddress: false } })\r\n                }\r\n                else {\r\n                    dispatch({ type: \"setCurParameter\", payload: { param: userAddressOrNFTId, isAddress: null } })\r\n                }\r\n            }\r\n        }\r\n        init();\r\n    })\r\n\r\n    return (\r\n        <>\r\n            {\r\n                userAddressOrNFTId === null || userAddressOrNFTId === undefined ?\r\n                    <>\r\n                        <div className=\"mainDashboardDiv\">\r\n                            <div className=\"subDashboardDiv\">\r\n                                {\r\n                                    listingData !== null ?\r\n                                        listingData.slice(0).reverse().map((data, i) => (\r\n                                            <NFTShowerCard key={i} nftMainData={data} />\r\n                                        ))\r\n                                        : <></>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </> : <Users />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","import React from \"react\";\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <>\r\n            <div className=\"mainLoader\">\r\n                <div className=\"subLoader\">\r\n                    <div className=\"loaderText\">V</div>\r\n                </div>\r\n                <div className=\"animatorDiv\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Loading;","import React, { useState, useEffect, createContext } from 'react'\nimport { ethers } from \"ethers\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Switch, Route } from \"react-router-dom\"\nimport \"./App.css\";\nimport StickmanNFT_ABI from \"./Contract/StickmanNFT_ABI.json\";\nimport Marketplace_ABI from \"./Contract/Marketplace_ABI.json\";\nimport getUserNFTData from \"./Functions/getUserNFTData.js\";\nimport getDashboardData from './Functions/getDashboardData';\nimport Header from './Components/Header/Header';\nimport Dashboard from \"./Components/Dashboard/Dashboard\";\nimport Loading from \"./Components/Loading\";\nimport Error404 from \"./Components/Error404\";\n\nconst requiredInfo = createContext();\n\nconst App = () => {\n\n  const [contractETH, setContractETH] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const dispatch = useDispatch();\n  let isLoading = useSelector(state => state.isLoading.data);\n\n  const reloadPage = () => {\n    window.location.reload();\n  }\n\n  if (window.ethereum) { // This Statement Will Caught When Account Will Changed In Metamask.\n    window.ethereum.on('accountsChanged', () => reloadPage());\n  }\n\n  useEffect(() => {\n    const init = async () => {\n      if ((window.ethereum !== undefined)) { // This Statement Checks That Whether User Have Metamask Or Not,  \n        dispatch({ type: \"setIsMetamask\", payload: true });\n        const provider = new ethers.providers.Web3Provider(\n          window.ethereum\n        );\n        await provider.send(\"eth_requestAccounts\", []); // It Will Send Request For Connecting To Metamask.\n        const signer = provider.getSigner();\n        setProvider(provider)\n        dispatch({ type: \"setCurUserAddress\", payload: await signer.getAddress() });\n        let contract_NFT = new ethers.Contract(process.env.REACT_APP_CONTRACT_NFT, StickmanNFT_ABI, signer);\n        let contract_Marketplace = new ethers.Contract(process.env.REACT_APP_CONTRACT_MARKETPLACE, Marketplace_ABI, signer);\n        setContractETH({\n          contract_NFT: contract_NFT,\n          contract_Marketplace: contract_Marketplace\n        });\n\n        try {\n          dispatch({ type: \"setDashboardData\", payload: await getDashboardData(contract_NFT, contract_Marketplace) });\n          dispatch({ type: \"setMainUserData\", payload: await getUserNFTData(await signer.getAddress(), provider, signer) });\n          dispatch({ type: \"setIsLoading\", payload: false })\n        } catch (error) {\n          console.log(error);\n        }\n      } else {\n        dispatch({ type: \"setIsMetamask\", payload: false })\n        let provider = ethers.getDefaultProvider(\"rinkeby\");\n        setProvider(provider)\n        // let provider = new InfuraProvider(\"ropsten\");\n        let wallet = new ethers.Wallet(process.env.REACT_APP_TEMP_WALLET);\n        let signer = wallet.connect(provider)\n        let contract_NFT = new ethers.Contract(process.env.REACT_APP_CONTRACT_NFT, StickmanNFT_ABI, signer);\n        let contract_Marketplace = new ethers.Contract(process.env.REACT_APP_CONTRACT_MARKETPLACE, Marketplace_ABI, signer);\n        setContractETH({\n          contract_NFT: contract_NFT,\n          contract_Marketplace: contract_Marketplace\n        });\n        try {\n          dispatch({ type: \"setDashboardData\", payload: await getDashboardData(contract_NFT, contract_Marketplace) });\n          dispatch({ type: \"setIsLoading\", payload: false })\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    }\n    init();\n  }, [])\n\n  return (\n    <>\n      <requiredInfo.Provider value={{\n        contractETH: contractETH,\n        provider: provider\n      }}>\n        <Header />\n        <Switch>\n          <Route exact path='/:userAddressOrNFTId?'>\n            <Dashboard />\n          </Route>\n          <Route>\n            <Error404 />\n          </Route>\n        </Switch>\n      </requiredInfo.Provider>\n      {\n        isLoading === true ? <Loading /> : <></>\n      }\n    </>\n  )\n}\n\nexport default App\nexport { requiredInfo };","import {\r\n    createReducer\r\n} from \"@reduxjs/toolkit\";\r\n\r\nexport const mainUserData = createReducer({\r\n    data: null\r\n}, {\r\n    setMainUserData: (state, action) => {\r\n        state.data = action.payload\r\n    }\r\n})\r\n\r\nexport const searchedUserData = createReducer({\r\n    data: null\r\n}, {\r\n    setSearchedUserData: (state, action) => {\r\n        state.data = action.payload\r\n    }\r\n})","import {\r\n    createReducer\r\n} from \"@reduxjs/toolkit\";\r\n\r\nexport const dashboardData = createReducer({\r\n    data: null\r\n}, {\r\n    setDashboardData: (state, action) => {\r\n        state.data = action.payload;\r\n    }\r\n})\r\n\r\nexport const searchedNFTData = createReducer({\r\n    data: null\r\n}, {\r\n    setSearchedNFTData: (state, action) => {\r\n        state.data = action.payload;\r\n    }\r\n})\r\n\r\nexport const isMetamask = createReducer({\r\n    data: null\r\n}, {\r\n    setIsMetamask: (state, action) => {\r\n        state.data = action.payload;\r\n    }\r\n})\r\n\r\nexport const isLoading = createReducer({\r\n    data: true\r\n}, {\r\n    setIsLoading: (state, action) => {\r\n        state.data = action.payload;\r\n    }\r\n})\r\n\r\nexport const curParameter = createReducer({\r\n    data: null\r\n}, {\r\n    setCurParameter: (state, action) => {\r\n        state.data = action.payload;\r\n    }\r\n})\r\n\r\nexport const curUserAddress = createReducer({\r\n    data: null\r\n}, {\r\n    setCurUserAddress: (state, action) => {\r\n        state.data = action.payload;\r\n    }\r\n})","import {\r\n    configureStore\r\n} from '@reduxjs/toolkit';\r\nimport {\r\n    mainUserData,\r\n    searchedUserData\r\n} from './Reducers/userStates';\r\nimport {\r\n    dashboardData,\r\n    searchedNFTData,\r\n    isMetamask,\r\n    isLoading,\r\n    curParameter,\r\n    curUserAddress\r\n} from './Reducers/tempStates';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        mainUserData: mainUserData,\r\n        searchedUserData: searchedUserData,\r\n        dashboardData: dashboardData,\r\n        searchedNFTData: searchedNFTData,\r\n        isMetamask: isMetamask,\r\n        isLoading: isLoading,\r\n        curParameter: curParameter,\r\n        curUserAddress: curUserAddress\r\n    }\r\n})","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { BrowserRouter } from 'react-router-dom';\nimport {store} from \"./Redux/store\";\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <BrowserRouter>\n     <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}